# Generated using halfpipe cli version 3.66.0
jobs:
- build_log_retention:
    minimum_succeeded_builds: 1
  name: build
  plan:
  - attempts: 2
    get: git
    timeout: 15m
    trigger: true
  - config:
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
      image_resource:
        source:
          registry_mirror:
            host: eu-mirror.gcr.io
          repository: openjdk
          tag: 8-jdk-stretch
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        RUNNING_IN_CI: "true"
      platform: linux
      run:
        args:
        - -c
        - |-
          if ! which bash > /dev/null && [ "$SUPPRESS_BASH_WARNING" != "true" ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo "Or if you are sure you don't need bash you can suppress this warning by setting the environment variable \"SUPPRESS_BASH_WARNING\" to \"true\"."
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:buster-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2

            if [ -e $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH
              cp -r $ARTIFACT $ARTIFACT_OUT_PATH
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../.git/ref`

          ./build.sh
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact build/distributions ../../artifacts-out/demo-snpass-training-mikhail/build
        dir: git/demo-snpass-training-mikhail
        path: /bin/sh
    task: build
    timeout: 1h
  - attempts: 2
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    put: artifacts
    timeout: 15m
  serial: true
- build_log_retention:
    minimum_succeeded_builds: 1
  ensure:
    attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-cleanup
      manifestPath: git/demo-snpass-training-mikhail/manifest-files/dev/manifest.yml
      timeout: 1h
    put: halfpipe-cleanup
    resource: cf-snpaas-bflux-training
    timeout: 1h
  name: deploy-test
  plan:
  - attempts: 2
    get: git
    passed:
    - build
    timeout: 15m
  - attempts: 2
    config:
      image_resource:
        source:
          password: ((halfpipe-gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/gcp-resource
          tag: stable
          username: _json_key
        type: registry-image
      inputs:
      - name: git
      outputs:
      - name: artifacts
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: production/demo-snpass-training-mikhail
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      platform: linux
      run:
        args:
        - .
        dir: artifacts
        path: /opt/resource/download
    task: get-artifact
    timeout: 15m
  - attempts: 2
    params:
      appPath: artifacts/demo-snpass-training-mikhail/build/distributions/demo-snpass-training-mikhail.zip
      cliVersion: cf6
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/demo-snpass-training-mikhail/manifest-files/dev/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    put: halfpipe-push
    resource: cf-snpaas-bflux-training
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-check
      manifestPath: git/demo-snpass-training-mikhail/manifest-files/dev/manifest.yml
      timeout: 1h
    put: halfpipe-check
    resource: cf-snpaas-bflux-training
    timeout: 1h
  - attempts: 2
    params:
      cliVersion: cf6
      command: halfpipe-promote
      manifestPath: git/demo-snpass-training-mikhail/manifest-files/dev/manifest.yml
      testDomain: springernature.app
      timeout: 1h
    put: halfpipe-promote
    resource: cf-snpaas-bflux-training
    timeout: 1h
  serial: true
resource_types:
- name: gcp-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/gcp-resource
    tag: stable
    username: _json_key
  type: registry-image
- name: cf-resource
  source:
    password: ((halfpipe-gcr.private_key))
    repository: eu.gcr.io/halfpipe-io/cf-resource-v2
    tag: stable
    username: _json_key
  type: registry-image
resources:
- check_every: 10m
  name: git
  source:
    branch: master
    paths:
    - demo-snpass-training-mikhail
    private_key: ((halfpipe-github.private_key))
    uri: git@github.com:springernature/bflux-snpaas-training.git
  type: git
- check_every: 24h
  name: artifacts
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: production/demo-snpass-training-mikhail
    json_key: ((halfpipe-artifacts.private_key))
  type: gcp-resource
- check_every: 24h
  name: cf-snpaas-bflux-training
  source:
    api: ((cloudfoundry.api-snpaas))
    org: ((cloudfoundry.org-snpaas))
    password: ((cloudfoundry.password-snpaas))
    space: bflux-training
    username: ((cloudfoundry.username-snpaas))
  type: cf-resource

